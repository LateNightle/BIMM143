---
title: "Class 07: Machine Learning 1"
author: "Nathaniel Lightle (A16669288)"
format: pdf
---

# Clustering

We will start today's lab with clustering methods, in particular so-called K-means. The main function for this in R is `kmeans()`

```{r}
x <- rnorm(1000, mean=3)
hist(x)
```

60 points
```{r}
tmp <- c(rnorm(30, 3), rnorm(30, -3))
x <- cbind(x=tmp, y=rev(tmp))
head(x)
```

We can pass this to the base R `plot()` function for a quick graph.

```{r}
plot(x)
```

With the `kmeans()` function you need to specify the data and how many centers you want. (nstart runs it multiple times and gives you the best answer)

```{r}
k <- kmeans(x,2, nstart=20)
k
```

Vectors (1 dimensional)
Data Frames (collection of data)
Lists (vectors + data frames)

>Q1. How many points are in each cluster?

```{r}
k$size
```

>Q2. Cluster membership?

```{r}
k$cluster
```


>Q3. Cluster centers?

```{r}
k$centers
```

>Q4. Plotting my results

```{r}
plot(x, col=k$cluster, pch=16)
#pch makes points solid
```

>Q5. Cluster the data agin with kmeans() into 4 groups and plot the results

```{r}
k4 <- kmeans(x, centers=4, nstart=20)
plot(x, col=k4$cluster, pch=16)
```

K-means is very popular mostly because it is fast and relatively straightforward to run and understand. It has a big limitiation in that you need to tell it how many groups (k, or centers) you want. 

#Hierarchical Clustering

The main function in base R is called `hclust()`. You have to pass it in a "distance matrix" not just your input data. 

You can generate a distance matri with the `dist()` function. 
```{r}
hc <- hclust ( dist(x) )
hc
```

Let's plot it

```{r}
plot(hc)
```

To find the clusters (cluster membership vector) 

```{r}
plot(hc)
abline (h=8, col="red")
grps <- cutree(hc, h=8)
```


```{r}
table(grps)
```

>Q6. Plot our hclust results

```{r}
plot(x, col=grps, pch=16)
```

## Part 2 

# PCA of UK Food Data

TEXT

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names = 1)
x
#View(x)
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
dim(x)
ncol(x)
nrow(x)
```

Fixing the rows so they line up

```{r}
# rownames(x) <- x[,1]
# x <- x[,-1]
# head(x)
```

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer the second approach because there's less room for error. If you run the code twice it won't change anything, but for the first method running the code twice would mess up the whole data set.


```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

> Q3: Changing what optional argument in the above barplot() function results in the following plot?

Changing besides = F changes the plot completely. 


> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)
```

The previous code results in graphs comparing each country side by side. If a point lands on the diagonal that means the countries are very similar in their consumption of that category of food.

> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

The main difference is the blue dot food category. 


## Principal Component Analysis (PCA)


PCA can help us make sense of these types of datasets. Let's see how it works. 

The main function in "base" R is called `prcomp()`. In this case we want to first take the transpose `t()` of our input `x` so the columns are the food types and the countries are the rows. 

```{r}
head( t(x) )
```

```{r}
pca <- prcomp (t(x))
summary(pca)
```

```{r}
pca$x
```

> Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```


> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x), col = c("orange", "red", "blue", "forestgreen"),
     pch=16)
```


```{r}
pca$rotation
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

# Lets focus on PC1 as it accounts for > 90% of variance 
```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2, main="PC1 Loading Values")
```

> Q9. Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2, main="PC2 Loading Values")
```

The two food groups featured prominently are "fresh potatoes" and "soft drinks".

PC2 mainly tells us about the food groups that differ the most. 


